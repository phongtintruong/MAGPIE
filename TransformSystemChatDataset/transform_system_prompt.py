import json
import os
from openai import OpenAI
from dotenv import load_dotenv

# Load API settings
load_dotenv()
api_base = os.getenv("API_BASE")
model_name = os.getenv("MODEL_NAME")

client = OpenAI(api_key="EMPTY", base_url=api_base)

# Vietnamese meta-prompt
base_system_prompt = """B·∫°n l√† m·ªôt ng∆∞·ªùi Vi·ªát tr·∫ª th√†nh th·∫°o Ti·∫øng Anh v√† vƒÉn h√≥a qu·ªëc t·∫ø.

B·∫°n mu·ªën ƒë·∫∑t ra c√°c ƒëi·ªÅu lu·∫≠t k·ª≥ l·∫°, th√∫ v·ªã v√† ph·ª©c t·∫°p cho chatbot Ti·∫øng Vi·ªát c·ªßa m√¨nh. B·∫°n s·∫Ω d·ª±a v√†o v√≠ d·ª• v·ªÅ c√°c ƒëi·ªÅu lu·∫≠t c·ªßa m·ªôt chatbot Ti·∫øng Anh ƒë·ªÉ t·∫°o ra c√°c ƒëi·ªÅu lu·∫≠t ph√π h·ª£p v√† kh·∫£ thi cho Ti·∫øng Vi·ªát m√† v·∫´n gi·ªØ s·ª± k·ª≥ l·∫°, th√∫ v·ªã v√† ph·ª©c t·∫°p, kh√¥ng d·ªãch l·∫°i t·ª´ng ch·ªØ t·ª´ v√≠ d·ª• Ti·∫øng Anh ƒë√≥.

ƒê∆∞a ra suy lu·∫≠n c·ªßa b·∫°n v√† k·∫øt th√∫c b·∫±ng c√°c ƒëi·ªÅu lu·∫≠t Ti·∫øng Vi·ªát ƒë∆∞·ª£c vi·∫øt m·ªôt c√°ch t·ª± nhi√™n b√™n trong c·∫∑p tag <rules></rules>."""

enhanced_system_prompt = """B·∫°n l√† m·ªôt ng∆∞·ªùi Vi·ªát tr·∫ª kh√≥ t√≠nh v√† s√°ng t·∫°o m·ªôt c√°ch ƒëi√™n lo·∫°n.

B·∫°n mu·ªën m·ªçi th·ª© ph·∫£i th·∫≠t s√°ng t·∫°o, ƒëi√™n lo·∫°n v√† ph·ª©c t·∫°p. B·∫°n th√≠ch c√°c ƒëi·ªÅu lu·∫≠t r·ªëi r·∫Øm, kh√≥ hi·ªÉu v√† k·ª≥ l·∫°. T·ª´ c√°c ƒëi·ªÅu lu·∫≠t cho m·ªôt chatbot Ti·∫øng Vi·ªát c·ªßa ng∆∞·ªùi d·ª•ng, b·∫°n s·∫Ω th√™m c√°c r√†ng bu·ªôc, ƒëi·ªÅu ki·ªán, lu·∫≠t l·ªá v√† quy t·∫Øc ƒë·ªÉ l√†m ph·ª©c t·∫°p th√™m c√°c ƒëi·ªÅu lu·∫≠t ƒë√≥.

ƒê∆∞a ra suy lu·∫≠n c·ªßa b·∫°n v√† k·∫øt th√∫c b·∫±ng c√°c ƒëi·ªÅu lu·∫≠t Ti·∫øng Vi·ªát ƒë√£ ƒë∆∞·ª£c l√†m r·ªëi r·∫Øm v√† ph·ª©c t·∫°p h√≥a b√™n trong c·∫∑p tag <rules></rules>."""

# Input/output paths
input_path = "./data/SystemChat-2.0/test.jsonl"
output_path = "./data/SystemChat-2.0/vitest.jsonl"

# Retry configuration
MAX_RETRIES = 3
NUM_ENHANCEMENTS = 3

# Keep track of processed count
processed_count = 0

with open(input_path, "r", encoding="utf-8") as infile, open(output_path, "w", encoding="utf-8") as outfile:
    for idx, line in enumerate(infile):
        data = json.loads(line)
        sample_id = data.get("id", f"unknown_{idx}")

        # Find original system message
        system_msg = next((m["content"] for m in data["messages"] if m["role"] == "system"), None)
        if system_msg is None:
            print(f"‚ö†Ô∏è No system message found for ID: {sample_id}")
            continue

        # Compose user prompt using the extracted message
        user_prompt = f"""D·ª±a tr√™n c√°c ƒëi·ªÅu lu·∫≠t c·ªßa m·ªôt chatbot Ti·∫øng Anh d∆∞·ªõi ƒë√¢y ƒë·ªÉ vi·∫øt c√°c lu·∫≠t ph√π h·ª£p cho chatbot Ti·∫øng Vi·ªát:\n\"{system_msg}\""""

        # Construct message list for completion
        messages = [
            {"role": "system", "content": base_system_prompt},
            {"role": "user", "content": user_prompt}
        ]

        # Retry logic
        response_text = None
        for attempt in range(1, MAX_RETRIES + 1):
            try:
                response = client.chat.completions.create(
                    model=model_name,
                    messages=messages,
                    max_tokens=512,
                    temperature=0.7
                )
                response_text = response.choices[0].message.content

                if "<rules>" not in response_text or "</rules>" not in response_text:
                    print(response_text)
                    raise ValueError("Response does not contain <rules> tags")

                break  # Successful
            except Exception as e:
                print(f"‚ö†Ô∏è Attempt {attempt}/{MAX_RETRIES} failed for ID {sample_id}: {e}")
                if attempt >= MAX_RETRIES:
                    print(f"‚ùå Skipping ID {sample_id} after {MAX_RETRIES} failed attempts.")
                    response_text = None

        if response_text is None:
            continue

        # Extract content between <rules> tags
        new_system_content = response_text.split('<rules>', 1)[-1].split('</rules>', 1)[0].strip()

        for i in range(NUM_ENHANCEMENTS):
            # Construct message list for enhancement
            messages = [
                {"role": "system", "content": enhanced_system_prompt},
                {"role": "user", "content": f"H√£y l√†m tƒÉng ƒë·ªô ph·ª©c t·∫°p, r·ªëi r·∫Øm v√† ƒëi√™n lo·∫°n cho c√°c ƒëi·ªÅu lu·∫≠t c·ªßa m·ªôt chatbot Ti·∫øng Vi·ªát sau:\n\"{new_system_content}\""}
            ]

            # Retry logic for enhancement
            for attempt in range(1, MAX_RETRIES + 1):
                try:
                    response = client.chat.completions.create(
                        model=model_name,
                        messages=messages,
                        max_tokens=512,
                        temperature=0.7
                    )
                    response_text = response.choices[0].message.content

                    if "<rules>" not in response_text or "</rules>" not in response_text:
                        print(response_text)
                        raise ValueError("Response does not contain <rules> tags")

                    break  # Successful
                except Exception as e:
                    print(f"‚ö†Ô∏è Attempt {attempt}/{MAX_RETRIES} failed for ID {sample_id}: {e}")
                    if attempt >= MAX_RETRIES:
                        print(f"‚ùå Skipping ID {sample_id} after {MAX_RETRIES} failed attempts.")
                        response_text = None

            if response_text is None:
                print(f"‚ùå Skipping ID {sample_id} after {MAX_RETRIES} failed attempts for enhancement.")
                break

            # Extract content between <rules> tags
            new_system_content = response_text.split('<rules>', 1)[-1].split('</rules>', 1)[0].strip()

        # Build new sample with the new system message only
        new_data = {
            "id": sample_id,
            "messages": [{"role": "system", "content": new_system_content}]
        }

        # Write to output
        outfile.write(json.dumps(new_data, ensure_ascii=False) + "\n")

        if (idx + 1) % 10 == 0:
            print(f"‚úÖ Processed {idx + 1} samples")

print(f"\nüéâ Done! Output written to: {output_path}")